/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ermaker;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import static java.lang.System.gc;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author root
 */
public class UI extends javax.swing.JFrame {

    JFileChooser jf = new JFileChooser(System.getProperty("user.dir"));
    BufferedImage bufferedImage;
    Graphics g;
    FontMetrics fm;
    HashMap<String, TableProperties> tableProperties;
    HashMap<Integer, Integer> rowMaxhight;
    HashMap<Integer, Integer> rowRelationCount;
    HashMap<String, Integer> relactionCount;
    HashMap<Boolean, Integer> colomnRelations;
    HashMap<Integer, int[]> loc;
    TableProperties tp;
    int maxWidth = 0, maxhight = 0, row = 1, gap = 100, sideGap = 500, attributeX = sideGap + 40,
            attributeY = 40, rowGap = 800, locId = 0, distence = 10, maxStringWidth = 0, coloumnHeight = 0,
            rowHeight = 40, extendDistence = 0;
    Color fontColor = Color.black, polygonFill = Color.WHITE, ovalFill = Color.WHITE,
            rectFill = Color.WHITE, lineColor = Color.BLACK, bacground = Color.white;

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblOut = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtInput = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        txtOutput = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtWidth = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        txtRow = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSide = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        chkGrid = new javax.swing.JCheckBox();
        txtGrid = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtHeight1 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        lblP1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        lblP2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        lblP3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        lblP4 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lblP5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        lblP6 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Text to ER");
        setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputActionPerformed(evt);
            }
        });

        jButton3.setText("Start");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel12.setText("Input text file:");

        jLabel13.setText("Output file location:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblOut, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                            .addComponent(txtInput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(lblOut, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Layout"));

        jLabel1.setText("Image width :");

        txtWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtWidthKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtWidthKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWidthKeyReleased(evt);
            }
        });

        jLabel2.setText("Image height :");

        txtHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHeightKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHeightKeyReleased(evt);
            }
        });

        txtRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRowActionPerformed(evt);
            }
        });
        txtRow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRowKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRowKeyReleased(evt);
            }
        });

        jLabel3.setText("Row gap :");

        txtSide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSideActionPerformed(evt);
            }
        });
        txtSide.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSideKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSideKeyReleased(evt);
            }
        });

        jLabel4.setText("Side gap :");

        chkGrid.setSelected(true);
        chkGrid.setText("Grid enable");
        chkGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGridActionPerformed(evt);
            }
        });

        txtGrid.setText("10");
        txtGrid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGridKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGridKeyReleased(evt);
            }
        });

        jLabel11.setText("Grid size:");

        txtHeight1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHeight1KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHeight1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRow))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkGrid)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHeight, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtHeight1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtGrid, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSide))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkGrid)
                    .addComponent(txtGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHeight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));

        jLabel5.setText("Font color:");

        jButton4.setText("...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        lblP1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblP1.setOpaque(true);

        jLabel6.setText("Line color:");

        jButton5.setText("...");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        lblP2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblP2.setOpaque(true);

        jButton6.setText("...");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        lblP3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblP3.setOpaque(true);

        jLabel7.setText("Background color:");

        jButton7.setText("...");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        lblP4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblP4.setOpaque(true);

        jButton8.setText("...");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel9.setText("Rect. fill color:");

        lblP5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblP5.setOpaque(true);

        jLabel10.setText("Oval fill color:");

        jButton9.setText("...");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        lblP6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblP6.setOpaque(true);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblP3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6)))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblP1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblP2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblP4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblP5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblP6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(768, 445));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jf.setMultiSelectionEnabled(false);
        jf.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jf.setFileFilter(new FileNameExtensionFilter("Text", "txt"));
        jf.showDialog(this, "Select");
        txtInput.setText(jf.getSelectedFile().toString());
        gc();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (txtHeight.getText().trim().isEmpty() || txtWidth.getText().trim().isEmpty() || txtInput.getText().trim().isEmpty() || txtOutput.getText().trim().isEmpty()
                || txtRow.getText().trim().isEmpty() || txtSide.getText().trim().isEmpty()
                || ((txtGrid.isEnabled()) ? (txtGrid.getText().trim().isEmpty() || Integer.parseInt(txtGrid.getText()) < 10) : false)) {
            JOptionPane.showMessageDialog(null, "Settings not sattisfid");
            return;
        }
        try {
            initialize(); //initialize variables 
            BufferedReader br = new BufferedReader(new FileReader(new File(txtInput.getText()))); //get txt file 
            String line, allLine = "";
            while ((line = br.readLine()) != null) {
                if (!line.startsWith("#")) {
                    allLine += line.replace("\n", "").trim();
                }
            }
            for (String split : allLine.split("]")) {
                switch ((split.charAt(0) + "").toUpperCase()) { //find type 
                    case "T":
                        makeTable(split); //goto make table
                        break;
                    case "R":
                        makeRelation(split); //goto make relation
                        break;
                }
            }

            Image img = bufferedImage; //get final bufferimage to image
            g.drawImage(img, 0, 0, this); //draw image
            try {
                ImageIO.write((RenderedImage) img, "png", new File(txtOutput.getText() + File.separator + "ER.png")); //save image file
                lblOut.setText("ER saved as ER.png");
                Desktop.getDesktop().open(new File(txtOutput.getText() + "/ER.png")); //open image
            } catch (IOException e) {
                lblOut.setText("ER build faild");
            }
            gc();
        } catch (Exception ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jf.setMultiSelectionEnabled(false);
        jf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jf.showDialog(this, "Select");
        txtOutput.setText(jf.getSelectedFile().toString());
        gc();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        gc();
        gc();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
    }//GEN-LAST:event_formWindowLostFocus

    private void txtRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRowActionPerformed

    private void txtSideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSideActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSideActionPerformed

    private void chkGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGridActionPerformed
        txtGrid.setEnabled(chkGrid.isSelected());
    }//GEN-LAST:event_chkGridActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        fontColor = JColorChooser.showDialog(null, "Select Font Color", Color.BLACK);
        lblP1.setBackground(fontColor);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        lineColor = JColorChooser.showDialog(null, "Select Line Color", Color.BLACK);
        lblP2.setBackground(lineColor);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        bacground = JColorChooser.showDialog(null, "Select Background Color", Color.BLACK);
        lblP3.setBackground(bacground);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        rectFill = JColorChooser.showDialog(null, "Select Rectangle Fill Color", Color.BLACK);
        lblP4.setBackground(rectFill);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        polygonFill = JColorChooser.showDialog(null, "Select Polygon Fill Color", Color.BLACK);
        lblP5.setBackground(polygonFill);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        ovalFill = JColorChooser.showDialog(null, "Select Ovel Fill Color", Color.BLACK);
        lblP6.setBackground(ovalFill);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void txtWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWidthKeyReleased


    }//GEN-LAST:event_txtWidthKeyReleased

    private void txtHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeightKeyReleased

    }//GEN-LAST:event_txtHeightKeyReleased

    private void txtRowKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRowKeyReleased

    }//GEN-LAST:event_txtRowKeyReleased

    private void txtSideKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSideKeyReleased

    }//GEN-LAST:event_txtSideKeyReleased

    private void txtGridKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGridKeyReleased

    }//GEN-LAST:event_txtGridKeyReleased

    private void txtWidthKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWidthKeyPressed

    }//GEN-LAST:event_txtWidthKeyPressed

    private void txtWidthKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWidthKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtWidthKeyTyped

    private void txtGridKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGridKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGridKeyTyped

    private void txtSideKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSideKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSideKeyTyped

    private void txtRowKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRowKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtRowKeyTyped

    private void txtHeightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeightKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtHeightKeyTyped

    private void txtOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputActionPerformed

    private void txtHeight1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeight1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeight1KeyTyped

    private void txtHeight1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeight1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeight1KeyReleased

    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
                     
    }//GEN-LAST:event_txtInputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkGrid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblOut;
    private javax.swing.JLabel lblP1;
    private javax.swing.JLabel lblP2;
    private javax.swing.JLabel lblP3;
    private javax.swing.JLabel lblP4;
    private javax.swing.JLabel lblP5;
    private javax.swing.JLabel lblP6;
    private javax.swing.JTextField txtGrid;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtHeight1;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtOutput;
    private javax.swing.JTextField txtRow;
    private javax.swing.JTextField txtSide;
    private javax.swing.JTextField txtWidth;
    // End of variables declaration//GEN-END:variables

    private void makeTable(String tabelString) {
        tp = new TableProperties();      //Object for save table properties 

        String[] tableData = tabelString.substring(tabelString.indexOf("[") + 1).split("-");

        for (String split : tableData[1].split(",")) {
            maxStringWidth = (fm.stringWidth(split.trim()) > maxStringWidth) ? fm.stringWidth(split.trim()) : maxStringWidth; //find max with in attributes
        }
        coloumnHeight = attributeY;
        for (String split : tableData[1].split(",")) { //draw attributes
            int a[] = new int[2];

            g.setColor(ovalFill);
            g.fillOval(attributeX - 10 - fm.stringWidth(split) + maxStringWidth, attributeY - fm.getHeight() - 5, fm.stringWidth(split) + 20, fm.getHeight() + 20);
            g.setColor(lineColor);
            g.drawOval(attributeX - 10 - fm.stringWidth(split) + maxStringWidth, attributeY - fm.getHeight() - 5, fm.stringWidth(split) + 20, fm.getHeight() + 20);

            if (split.startsWith("*")) {    //find PK
                split = split.replace("*", "");
                g.setColor(fontColor);
                g.drawString(split.replace("*", ""), attributeX + maxStringWidth - fm.stringWidth(split), attributeY);
                g.setColor(lineColor);
                drawRelation(attributeX + maxStringWidth - fm.stringWidth(split), attributeY, attributeX + maxStringWidth, attributeY);
            } else if (split.endsWith("*")) {    //find FK
                split = split.replace("*", "");
                g.setColor(fontColor);
                g.drawString(split.replace("*", ""), attributeX + maxStringWidth - fm.stringWidth(split), attributeY);
                g.setColor(lineColor);
                drawRelation(attributeX + maxStringWidth - fm.stringWidth(split), attributeY, attributeX + maxStringWidth, attributeY);
                drawRelation(attributeX + maxStringWidth - fm.stringWidth(split), attributeY + 3, attributeX + maxStringWidth, attributeY + 3);
            } else {
                g.setColor(fontColor);
                g.drawString(split.replace("*", ""), attributeX + maxStringWidth - fm.stringWidth(split), attributeY);
                g.setColor(lineColor);
            }
            a[0] = attributeX + maxStringWidth + 10;  //set table name x
            a[1] = attributeY;                        //set table name y
            attributeY += fm.getHeight() + 25;
            loc.put(locId, a);                          //add location to map
            locId++;
        }
        coloumnHeight = (attributeY + fm.getHeight()) + coloumnHeight;
        g.setColor(rectFill);
        g.fillRect(attributeX + maxStringWidth + gap - 5, (coloumnHeight / 2) - fm.getHeight() + 2, fm.stringWidth(tableData[0]) + 10, fm.getHeight() + 8);
        g.setColor(lineColor);
        g.drawRect(attributeX + maxStringWidth + gap - 5, (coloumnHeight / 2) - fm.getHeight() + 2, fm.stringWidth(tableData[0]) + 10, fm.getHeight() + 8);
        g.setColor(fontColor);
        g.drawString(tableData[0], attributeX + maxStringWidth + gap, coloumnHeight / 2);
        g.setColor(lineColor);

        for (int i = 0; i < loc.size(); i++) {          //draw connections
            drawRelation(loc.get(i)[0], loc.get(i)[1], attributeX + maxStringWidth + gap - 4, ((coloumnHeight / 2) - fm.getHeight() + 2) + ((fm.getHeight() + 8) / 2));
        }

        maxWidth = attributeX + maxStringWidth + gap + fm.stringWidth(tableData[0]);
        maxhight = (maxhight < attributeY + fm.getHeight()) ? attributeY + fm.getHeight() : maxhight;

        tp.setLocX(attributeX + maxStringWidth + gap - 4);                  //set table properties
        tp.setLocY((coloumnHeight / 2) - fm.getHeight() + 2);
        tp.setRow(row);
        tp.setWidth(fm.stringWidth(tableData[0]) + 10);
        tp.setHeight((fm.getHeight() + 8));

        tableProperties.put(tableData[0], tp);          //add TP
        relactionCount.put(tableData[0], 0);            //add relation count for table
        rowMaxhight.put(row, maxhight);                 //add row max height
        rowRelationCount.put(row, 0);                   //add row relation count

        reset();                                        //reset things for next table
        gc();
    }

    private void reset() {
        if (sideGap < (bufferedImage.getWidth() - (maxWidth + rowGap))) {       //find width for next table 
            attributeX = maxWidth + rowGap;
            attributeY = rowHeight;
        } else {                                                                //if not satis make new row
            attributeX = sideGap + 40;
            rowHeight = maxhight + rowGap;
            attributeY = rowHeight;
            maxhight = 0;
            row++;
        }
        maxStringWidth = 0;
        maxWidth = 0;
        locId = 0;
        loc = new HashMap<>();
    }

    private void makeRelation(String relationString) {
        String[] relation = relationString.substring(relationString.indexOf("[") + 1).split("-");
        String[] relationTable = relation[0].split(" ");                                            //get table for relation
        String[] relationLable = relation[1].split(" ");                                            //get relation lable
        relationLable[0] = (relationLable[0].equals("*")) ? "M" : "1";
        relationLable[2] = (relationLable[2].equals("*")) ? "M" : "1";
        createRelationWithText(relationTable[0], relationTable[2], relationLable[0], relationLable[2], relationTable[1]);   //make relation
    }

    private void createRelationWithText(String first, String second, String firstKey, String secondKey, String relation) {
        TableProperties tpFirst = tableProperties.get(first);       //get TPs
        TableProperties tpSecond = tableProperties.get(second);
        TableProperties temp;

        extendDistence = fm.stringWidth(relation) + 10;             //extend for polygon

        int firstLineStartX = 0;                                    //create needed variables for relation 
        int firstLineStartY = 0;
        int secondLineStartX = 0;
        int secondLineStartY = 0;
        int extendFirst = 0;
        int extendSecond = 0;
        int extendColumn = 0;
        int count = 0;

        if ((tpFirst.getLocX() <= tpSecond.getLocX() || tpFirst.getLocX() > tpSecond.getLocX()) && tpFirst.getRow() == tpSecond.getRow()) {//table in same row
            if (tpFirst.getLocX() >= tpSecond.getLocX()) {
                temp = tpFirst;
                tpFirst = tpSecond;
                tpSecond = temp;
            }
            firstLineStartX = tpFirst.getLocX() + tpFirst.getWidth() - 10 - (relactionCount.get(first) * distence);// get relation count and find location x for new relation
            firstLineStartY = tpFirst.getLocY() + tpFirst.getHeight();// get relation count and find location y for new relation
            secondLineStartX = tpSecond.getLocX() + 10 + (relactionCount.get(second) * distence);
            secondLineStartY = tpSecond.getLocY() + tpSecond.getHeight();

            extendFirst = rowMaxhight.get(tpFirst.getRow()) + (rowRelationCount.get(tpFirst.getRow()) * extendDistence);// get row max height and find extend location x for new relation
            extendSecond = extendFirst;
            g.setColor(lineColor);
            drawRelation(firstLineStartX, firstLineStartY, firstLineStartX, extendFirst);                               // draw new relation
            drawRelation(secondLineStartX, secondLineStartY, secondLineStartX, extendSecond);
            drawRelation(firstLineStartX, extendFirst, secondLineStartX, extendSecond);
            g.setColor(fontColor);
            g.drawString(firstKey, firstLineStartX, firstLineStartY + fm.stringWidth(firstKey) + 10);
            g.drawString(secondKey, secondLineStartX, secondLineStartY + fm.stringWidth(secondKey) + 10);
            g.setColor(lineColor);

            count = rowRelationCount.get(tpFirst.getRow());                     // increes relation counts
            rowRelationCount.put(tpFirst.getRow(), ++count);
            count = rowRelationCount.get(tpSecond.getRow());
            rowRelationCount.put(tpSecond.getRow(), ++count);

        } else if ((tpFirst.getLocX() <= tpSecond.getLocX() || tpFirst.getLocX() >= tpSecond.getLocX()) && (tpFirst.getRow() < tpSecond.getRow() || tpFirst.getRow() > tpSecond.getRow())) {//table in deferent row
            if (tpFirst.getRow() > tpSecond.getRow()) {
                temp = tpFirst;
                tpFirst = tpSecond;
                tpSecond = temp;
            }

            firstLineStartX = tpFirst.getLocX() + tpFirst.getWidth() - 10 - (relactionCount.get(first) * distence);
            firstLineStartY = tpFirst.getLocY() + tpFirst.getHeight();
            secondLineStartX = tpSecond.getLocX() + 10 + (relactionCount.get(first) * distence);
            secondLineStartY = tpSecond.getLocY();

            if ((tpSecond.getRow() - tpFirst.getRow()) == 1) {          //find row gap
                extendFirst = rowMaxhight.get(tpFirst.getRow()) + (rowRelationCount.get(tpFirst.getRow()) * extendDistence);
                extendSecond = rowMaxhight.get(tpSecond.getRow() - 1) + (rowRelationCount.get(tpSecond.getRow() - 1) * extendDistence);
                g.setColor(lineColor);
                drawRelation(firstLineStartX, firstLineStartY, firstLineStartX, extendFirst);
                drawRelation(secondLineStartX, secondLineStartY, secondLineStartX, extendSecond);
                drawRelation(firstLineStartX, extendFirst, secondLineStartX, extendSecond);
                g.setColor(fontColor);
                g.drawString(firstKey, firstLineStartX, firstLineStartY + fm.stringWidth(firstKey) + 10);
                g.drawString(secondKey, secondLineStartX, secondLineStartY);
                g.setColor(lineColor);
                count = rowRelationCount.get(tpFirst.getRow());
                rowRelationCount.put(tpFirst.getRow(), ++count);
                count = rowRelationCount.get(tpSecond.getRow());
                rowRelationCount.put(tpSecond.getRow(), ++count);
            } else {
                extendFirst = rowMaxhight.get(tpFirst.getRow()) + (rowRelationCount.get(tpFirst.getRow()) * extendDistence);
                extendSecond = rowMaxhight.get(tpSecond.getRow() - 1) + (rowRelationCount.get(tpSecond.getRow() - 1) * extendDistence);
                extendColumn = (tpFirst.getLocX() <= bufferedImage.getWidth() / 2) ? columnCal(true) : columnCal(false);
                g.setColor(lineColor);
                drawRelation(firstLineStartX, firstLineStartY, firstLineStartX, extendFirst);
                drawRelation(secondLineStartX, secondLineStartY, secondLineStartX, extendSecond);
                drawRelation(firstLineStartX, extendFirst, extendColumn, extendFirst);
                drawRelation(extendColumn, extendFirst, extendColumn, extendSecond);
                drawRelation(secondLineStartX, extendSecond, extendColumn, extendSecond);

                g.setColor(fontColor);
                g.drawString(firstKey, firstLineStartX, firstLineStartY + fm.stringWidth(firstKey) + 10);
                g.drawString(secondKey, secondLineStartX, secondLineStartY);
                g.setColor(lineColor);
                firstLineStartX = extendColumn - (fm.stringWidth(relation) / 2) - 50;
                extendFirst = (extendFirst + extendSecond) / 2;
                secondLineStartX = extendColumn + (fm.stringWidth(relation) / 2) + 50;
                extendSecond = extendFirst;

                count = rowRelationCount.get(tpFirst.getRow());
                rowRelationCount.put(tpFirst.getRow(), ++count);
                count = rowRelationCount.get(tpSecond.getRow() - 1);
                rowRelationCount.put(tpSecond.getRow() - 1, ++count);
            }

        }

        int[] x = {((firstLineStartX + secondLineStartX) / 2) - (fm.stringWidth(relation) / 2) - 50, (firstLineStartX + secondLineStartX) / 2, ((firstLineStartX + secondLineStartX) / 2) + (fm.stringWidth(relation) / 2) + 50, (firstLineStartX + secondLineStartX) / 2};
        int[] y = {extendFirst, extendFirst + (fm.stringWidth(relation)), extendSecond, extendSecond - (fm.stringWidth(relation))};
        g.setColor(polygonFill);
        g.fillPolygon(x, y, 4);
        g.setColor(lineColor);
        g.drawPolygon(x, y, 4);
        g.setColor(fontColor);
        g.drawString(relation, ((firstLineStartX + secondLineStartX) / 2) - (fm.stringWidth(relation) / 2), extendFirst);
        g.setColor(lineColor);
        count = relactionCount.get(first);
        relactionCount.put(first, ++count);
        count = relactionCount.get(second);
        relactionCount.put(second, ++count);

    }

    private void initialize() throws Exception {                //initialize variable as user inputs
        this.bufferedImage = new BufferedImage(Integer.parseInt(txtWidth.getText()), Integer.parseInt(txtHeight.getText()), BufferedImage.TYPE_INT_RGB);
        this.tableProperties = new HashMap();
        this.rowMaxhight = new HashMap();
        this.rowRelationCount = new HashMap();
        this.relactionCount = new HashMap();
        this.colomnRelations = new HashMap();
        this.loc = new HashMap();
        this.g = bufferedImage.getGraphics();
        this.sideGap = Integer.parseInt(txtSide.getText());
        this.rowGap = Integer.parseInt(txtRow.getText());
        maxWidth = 0;
        maxhight = 0;
        row = 1;
        gap = 100;
        attributeX = sideGap + 40;
        attributeY = 40;
        locId = 0;
        distence = 10;
        maxStringWidth = 0;
        coloumnHeight = 0;
        rowHeight = 40;
        extendDistence = 0;
        g.setColor(bacground);
        g.fillRect(0, 0, bufferedImage.getWidth(), bufferedImage.getHeight());
        g.setColor(Color.lightGray);
        g.setFont(new Font("TimesRoman", Font.PLAIN, 23));
        this.fm = g.getFontMetrics();
        if (chkGrid.isSelected()) {                 //make backgeround grid
            int grid = Integer.parseInt(txtGrid.getText());
            if (grid >= 10) {
                for (int i = 0; i <= bufferedImage.getWidth(); i += grid) {
                    for (int j = 0; j < bufferedImage.getHeight(); j += grid) {
                        drawRelation(i, j, i, j);
                    }
                }
            }
        }
        g.setColor(lineColor);
    }

    private void drawRelation(int startX, int startY, int endX, int endY) {     //drow lines
        g.drawLine(startX, startY, endX, endY);
    }

    private int columnCal(boolean b) {      //caculate side gap relation counts and return count
        int columnExtendDistence;
        if (b) {
            int count = colomnRelations.getOrDefault(b, 0);
            columnExtendDistence = ((sideGap / 150) - 1) * 150 - (count * 150);
            colomnRelations.put(b, ++count);
        } else {
            int count = colomnRelations.getOrDefault(b, 0);
            columnExtendDistence = bufferedImage.getWidth() - 150 - (count * 150);
            colomnRelations.put(b, ++count);
        }
        return columnExtendDistence;
    }
}
